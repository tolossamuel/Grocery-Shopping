// Mocks generated by Mockito 5.4.4 from annotations
// in grocery_shopping/test/helper/mock_data.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:convert' as _i11;
import 'dart:typed_data' as _i13;

import 'package:dartz/dartz.dart' as _i2;
import 'package:grocery_shopping/core/failure/failure.dart' as _i7;
import 'package:grocery_shopping/features/grocery/data/datasource/grocery_local_datasource.dart'
    as _i10;
import 'package:grocery_shopping/features/grocery/data/datasource/grocery_remote_datasource.dart'
    as _i9;
import 'package:grocery_shopping/features/grocery/data/model/grocery_model.dart'
    as _i4;
import 'package:grocery_shopping/features/grocery/domain/entity/grocery_entity.dart'
    as _i8;
import 'package:grocery_shopping/features/grocery/domain/repository/grocery_repository.dart'
    as _i5;
import 'package:http/http.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeClient_1 extends _i1.SmartFake implements _i3.Client {
  _FakeClient_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGroceryModel_2 extends _i1.SmartFake implements _i4.GroceryModel {
  _FakeGroceryModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_3 extends _i1.SmartFake implements _i3.Response {
  _FakeResponse_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_4 extends _i1.SmartFake
    implements _i3.StreamedResponse {
  _FakeStreamedResponse_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GroceryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockGroceryRepository extends _i1.Mock implements _i5.GroceryRepository {
  MockGroceryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i8.GroceryEntity>>>
      getGroceryList() => (super.noSuchMethod(
            Invocation.method(
              #getGroceryList,
              [],
            ),
            returnValue: _i6
                .Future<_i2.Either<_i7.Failure, List<_i8.GroceryEntity>>>.value(
                _FakeEither_0<_i7.Failure, List<_i8.GroceryEntity>>(
              this,
              Invocation.method(
                #getGroceryList,
                [],
              ),
            )),
          ) as _i6.Future<_i2.Either<_i7.Failure, List<_i8.GroceryEntity>>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i8.GroceryEntity>> getGroceryProduct(
          String? productId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroceryProduct,
          [productId],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, _i8.GroceryEntity>>.value(
                _FakeEither_0<_i7.Failure, _i8.GroceryEntity>(
          this,
          Invocation.method(
            #getGroceryProduct,
            [productId],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i8.GroceryEntity>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, Map<String, dynamic>>> getCartProduct() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCartProduct,
          [],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, Map<String, dynamic>>>.value(
                _FakeEither_0<_i7.Failure, Map<String, dynamic>>(
          this,
          Invocation.method(
            #getCartProduct,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, Map<String, dynamic>>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, bool>> deleteCartProduct(String? cartId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteCartProduct,
          [cartId],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, bool>>.value(
            _FakeEither_0<_i7.Failure, bool>(
          this,
          Invocation.method(
            #deleteCartProduct,
            [cartId],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, bool>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, bool>> addCartProduct(
    String? cartId,
    dynamic products,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addCartProduct,
          [
            cartId,
            products,
          ],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, bool>>.value(
            _FakeEither_0<_i7.Failure, bool>(
          this,
          Invocation.method(
            #addCartProduct,
            [
              cartId,
              products,
            ],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, bool>>);
}

/// A class which mocks [GroceryRemoteDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockGroceryRemoteDataSourceImpl extends _i1.Mock
    implements _i9.GroceryRemoteDataSourceImpl {
  MockGroceryRemoteDataSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_1(
          this,
          Invocation.getter(#client),
        ),
      ) as _i3.Client);

  @override
  _i6.Future<List<_i4.GroceryModel>> getGroceryProducts() =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroceryProducts,
          [],
        ),
        returnValue:
            _i6.Future<List<_i4.GroceryModel>>.value(<_i4.GroceryModel>[]),
      ) as _i6.Future<List<_i4.GroceryModel>>);

  @override
  _i6.Future<_i4.GroceryModel> getOneGroceryProducts(String? productId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOneGroceryProducts,
          [productId],
        ),
        returnValue: _i6.Future<_i4.GroceryModel>.value(_FakeGroceryModel_2(
          this,
          Invocation.method(
            #getOneGroceryProducts,
            [productId],
          ),
        )),
      ) as _i6.Future<_i4.GroceryModel>);
}

/// A class which mocks [GroceryRemoteDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockGroceryRemoteDatasource extends _i1.Mock
    implements _i9.GroceryRemoteDatasource {
  MockGroceryRemoteDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i4.GroceryModel>> getGroceryProducts() =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroceryProducts,
          [],
        ),
        returnValue:
            _i6.Future<List<_i4.GroceryModel>>.value(<_i4.GroceryModel>[]),
      ) as _i6.Future<List<_i4.GroceryModel>>);

  @override
  _i6.Future<_i4.GroceryModel> getOneGroceryProducts(String? productId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOneGroceryProducts,
          [productId],
        ),
        returnValue: _i6.Future<_i4.GroceryModel>.value(_FakeGroceryModel_2(
          this,
          Invocation.method(
            #getOneGroceryProducts,
            [productId],
          ),
        )),
      ) as _i6.Future<_i4.GroceryModel>);
}

/// A class which mocks [CartService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCartService extends _i1.Mock implements _i10.CartService {
  MockCartService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<bool> addOrUpdateCartProduct(
    String? cartId,
    dynamic product,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addOrUpdateCartProduct,
          [
            cartId,
            product,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<dynamic> getCartProductById(String? cartId) => (super.noSuchMethod(
        Invocation.method(
          #getCartProductById,
          [cartId],
        ),
        returnValue: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);

  @override
  _i6.Future<Map<String, dynamic>> getAllCartProducts() => (super.noSuchMethod(
        Invocation.method(
          #getAllCartProducts,
          [],
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);

  @override
  _i6.Future<bool> deleteCartProduct(String? cartId) => (super.noSuchMethod(
        Invocation.method(
          #deleteCartProduct,
          [cartId],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i3.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i3.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<_i3.Response>);

  @override
  _i6.Future<_i3.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i3.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<_i3.Response>);

  @override
  _i6.Future<_i3.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i11.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i3.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i3.Response>);

  @override
  _i6.Future<_i3.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i11.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i3.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i3.Response>);

  @override
  _i6.Future<_i3.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i11.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i3.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i3.Response>);

  @override
  _i6.Future<_i3.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i11.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i3.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i3.Response>);

  @override
  _i6.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<String>.value(_i12.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<String>);

  @override
  _i6.Future<_i13.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i13.Uint8List>.value(_i13.Uint8List(0)),
      ) as _i6.Future<_i13.Uint8List>);

  @override
  _i6.Future<_i3.StreamedResponse> send(_i3.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i6.Future<_i3.StreamedResponse>.value(_FakeStreamedResponse_4(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i6.Future<_i3.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i3.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i3.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<_i3.Response>);

  @override
  _i6.Future<_i3.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i3.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<_i3.Response>);

  @override
  _i6.Future<_i3.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i11.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i3.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i3.Response>);

  @override
  _i6.Future<_i3.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i11.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i3.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i3.Response>);

  @override
  _i6.Future<_i3.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i11.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i3.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i3.Response>);

  @override
  _i6.Future<_i3.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i11.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i3.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i3.Response>);

  @override
  _i6.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<String>.value(_i12.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<String>);

  @override
  _i6.Future<_i13.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i13.Uint8List>.value(_i13.Uint8List(0)),
      ) as _i6.Future<_i13.Uint8List>);

  @override
  _i6.Future<_i3.StreamedResponse> send(_i3.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i6.Future<_i3.StreamedResponse>.value(_FakeStreamedResponse_4(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i6.Future<_i3.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
